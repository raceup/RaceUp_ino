<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_bms_device_reader" kind="class" language="C++" prot="public">
    <compoundname>BmsDeviceReader</compoundname>
    <includes refid="_bms_device_reader_8h" local="no">BmsDeviceReader.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_bms_device_reader_1a00678a97467753d00db7f52209652bb9" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double BmsDeviceReader::BETA_THERMISTOR</definition>
        <argsstring></argsstring>
        <name>BETA_THERMISTOR</name>
        <initializer>= 3435.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thermistor data</para><para>Copyright 2016 - 2017 RaceUp Team Unipd</para><para>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at</para><para><ulink url="http://www.apache.org/licenses/LICENSE-2.0">http://www.apache.org/licenses/LICENSE-2.0</ulink></para><para>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Bms/BmsDeviceReader.h" line="69" column="1" bodyfile="src/Bms/BmsDeviceReader.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bms_device_reader_1a690fcc9572eec59496f5815d5ad96868" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double BmsDeviceReader::RB_THERMISTOR</definition>
        <argsstring></argsstring>
        <name>RB_THERMISTOR</name>
        <initializer>= 1800.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Bms/BmsDeviceReader.h" line="70" column="1" bodyfile="src/Bms/BmsDeviceReader.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bms_device_reader_1afb697685241c1c09748834cbbc182577" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double BmsDeviceReader::RT_THERMISTOR</definition>
        <argsstring></argsstring>
        <name>RT_THERMISTOR</name>
        <initializer>= 1500.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Bms/BmsDeviceReader.h" line="71" column="1" bodyfile="src/Bms/BmsDeviceReader.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bms_device_reader_1a80aebbbaaa3fbd33df82d70c185fb738" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double BmsDeviceReader::R0_THERMISTOR</definition>
        <argsstring></argsstring>
        <name>R0_THERMISTOR</name>
        <initializer>= 10000.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Bms/BmsDeviceReader.h" line="72" column="1" bodyfile="src/Bms/BmsDeviceReader.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_bms_device_reader_1af56a2eaeb612587f91b9271ffaf8cda0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>byte *</type>
        <definition>byte * BmsDeviceReader::bmsDeviceRead</definition>
        <argsstring>(byte deviceAddress, byte regAddress, byte length)</argsstring>
        <name>bmsDeviceRead</name>
        <param>
          <type>byte</type>
          <declname>deviceAddress</declname>
        </param>
        <param>
          <type>byte</type>
          <declname>regAddress</declname>
        </param>
        <param>
          <type>byte</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read data read from registers <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deviceAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>where to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>registry address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>data read from registers </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Bms/BmsDeviceReader.h" line="35" column="1" bodyfile="src/Bms/BmsDeviceReader.cpp" bodystart="28" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_bms_device_reader_1ad3a3a7bb7cae1e3a69f092004cb533ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double BmsDeviceReader::getTemperature</definition>
        <argsstring>(byte device_address, byte temperature)</argsstring>
        <name>getTemperature</name>
        <param>
          <type>byte</type>
          <declname>device_address</declname>
        </param>
        <param>
          <type>byte</type>
          <declname>temperature</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_address</parametername>
</parameternamelist>
<parameterdescription>
<para>address of device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>registry address of temperature to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>temperature of device </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Bms/BmsDeviceReader.h" line="42" column="1" bodyfile="src/Bms/BmsDeviceReader.cpp" bodystart="100" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_bms_device_reader_1a1f0651bfef7b2235825320e1e96993a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double BmsDeviceReader::getGpaiVbatt</definition>
        <argsstring>(byte device_address, bool dev)</argsstring>
        <name>getGpaiVbatt</name>
        <param>
          <type>byte</type>
          <declname>device_address</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TODO: WTF?? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_address</parametername>
</parameternamelist>
<parameterdescription>
<para>address of device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>TODO: WTF?? </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TODO: WTF?? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Bms/BmsDeviceReader.h" line="50" column="1" bodyfile="src/Bms/BmsDeviceReader.cpp" bodystart="109" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_bms_device_reader_1abcc5341d72ed906225e85b5faa5cf6e8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BmsDeviceReader::getCellVoltage</definition>
        <argsstring>(byte deviceAddress, byte cellNumber)</argsstring>
        <name>getCellVoltage</name>
        <param>
          <type>byte</type>
          <declname>deviceAddress</declname>
        </param>
        <param>
          <type>byte</type>
          <declname>cellNumber</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return cell voltage <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deviceAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>address of device to get info of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cellNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>cell number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cell voltage of cell in device </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Bms/BmsDeviceReader.h" line="58" column="1" bodyfile="src/Bms/BmsDeviceReader.cpp" bodystart="119" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_bms_device_reader_1a824d04ae77bd18902c1445980fe9dc3a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>byte *</type>
        <definition>byte * BmsDeviceReader::getBmsDeviceStatus</definition>
        <argsstring>(byte device_address)</argsstring>
        <name>getBmsDeviceStatus</name>
        <param>
          <type>byte</type>
          <declname>device_address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read status <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deviceAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>address of device to get info of </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Bms/BmsDeviceReader.h" line="64" column="1" bodyfile="src/Bms/BmsDeviceReader.cpp" bodystart="127" bodyend="129"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Copyright 2016 - 2017 RaceUp Team Unipd</para><para>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at</para><para><ulink url="http://www.apache.org/licenses/LICENSE-2.0">http://www.apache.org/licenses/LICENSE-2.0</ulink></para><para>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. </para>    </detaileddescription>
    <location file="src/Bms/BmsDeviceReader.h" line="25" column="1" bodyfile="src/Bms/BmsDeviceReader.h" bodystart="25" bodyend="73"/>
    <listofallmembers>
      <member refid="class_bms_device_reader_1a00678a97467753d00db7f52209652bb9" prot="public" virt="non-virtual"><scope>BmsDeviceReader</scope><name>BETA_THERMISTOR</name></member>
      <member refid="class_bms_device_reader_1af56a2eaeb612587f91b9271ffaf8cda0" prot="public" virt="non-virtual"><scope>BmsDeviceReader</scope><name>bmsDeviceRead</name></member>
      <member refid="class_bms_device_reader_1a824d04ae77bd18902c1445980fe9dc3a" prot="public" virt="non-virtual"><scope>BmsDeviceReader</scope><name>getBmsDeviceStatus</name></member>
      <member refid="class_bms_device_reader_1abcc5341d72ed906225e85b5faa5cf6e8" prot="public" virt="non-virtual"><scope>BmsDeviceReader</scope><name>getCellVoltage</name></member>
      <member refid="class_bms_device_reader_1a1f0651bfef7b2235825320e1e96993a0" prot="public" virt="non-virtual"><scope>BmsDeviceReader</scope><name>getGpaiVbatt</name></member>
      <member refid="class_bms_device_reader_1ad3a3a7bb7cae1e3a69f092004cb533ed" prot="public" virt="non-virtual"><scope>BmsDeviceReader</scope><name>getTemperature</name></member>
      <member refid="class_bms_device_reader_1a80aebbbaaa3fbd33df82d70c185fb738" prot="public" virt="non-virtual"><scope>BmsDeviceReader</scope><name>R0_THERMISTOR</name></member>
      <member refid="class_bms_device_reader_1a690fcc9572eec59496f5815d5ad96868" prot="public" virt="non-virtual"><scope>BmsDeviceReader</scope><name>RB_THERMISTOR</name></member>
      <member refid="class_bms_device_reader_1afb697685241c1c09748834cbbc182577" prot="public" virt="non-virtual"><scope>BmsDeviceReader</scope><name>RT_THERMISTOR</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
